from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from handlers.support import SupportClass
from handlers.rent_a_room import RentARoom
from utils.states import SelectHotel, UserCabinet
from utils.data_base import DataBase


__all__ = [
    'MainHandler'
]


class MainHandler(SupportClass):
    rent_a_room_class = RentARoom()

    def __init__(self):
        super().__init__()
        self._rent_a_room_kb()

    async def main_handler(self, message: Message, state: FSMContext):
        match message.text:

            case '–û—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É üèô':
                await self.rent_a_room(message, state)

            case '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é üóì':
                await self.check_history(message, state)

            case '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç üíº':
                await self.user_cabinet(message, state)

            case _:
                await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é ‚¨áÔ∏è")

    async def rent_a_room(self, message: Message, state: FSMContext):
        await self.__check_authorization_data(message, state)
        state_data = await state.get_data()
        if state_data['CITY'] is None:
            await message.answer(
                "–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ",
                reply_markup=self._geo_ikb
            )
            await state.set_state(SelectHotel.GET_LOCATION)

        else:
            await self.rent_a_room_class.get_hotels(message, state)

    @staticmethod
    async def __check_authorization_data(message: Message, state: FSMContext) -> bool:
        state_data = await state.get_data()
        pool = await DataBase.get_pool()
        async with pool.acquire() as con:
            users_data = await con.fetchrow(
                "SELECT email, telephone_number, passport_number, passport_valid_until FROM users WHERE id = $1",
                state_data['USER_ID']
            )

            all_data_confirm = True
            if users_data['email'] is None:
                all_data_confirm = False
            elif users_data['telephone_number']:
                all_data_confirm = False
            elif users_data['passport_number']:
                all_data_confirm = False
            elif users_data['passport_valid_until']:
                all_data_confirm = False

            if all_data_confirm is False:
                await message.answer("""–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –≤—Å—ñ –¥–∞–Ω—ñ —â–æ–± –±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏
–ü–æ–∫–∞ —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ç–∏—à–µ —ó—Ö –ª–∏—à–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏""")

        return all_data_confirm

    async def set_location(self, message: Message, state: FSMContext):
        if message.location:
            user_city = await self.get_city_name(
                message.location.latitude,
                message.location.longitude
            )
            await message.answer(f"–í–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ <b>{user_city.capitalize()}</b>", parse_mode='HTML')
            await state.update_data(CITY=user_city.capitalize())
            await self.rent_a_room(message, state)

        elif message.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚§µÔ∏è":
            await self.main_menu(message, state)

        else:
            await message.answer(f"–í–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ <b>{message.text.capitalize()}</b>", parse_mode='HTML')
            await state.update_data(CITY=message.text.capitalize())
            await self.rent_a_room(message, state)

    async def user_cabinet(self, message: Message, state: FSMContext):
        pool = await DataBase.get_pool()
        async with pool.acquire() as con:
            state_data = await state.get_data()
            user_data = await con.fetchrow(
                """SELECT first_name, second_name, birthday, email, 
                telephone_number, passport_number, passport_valid_until
                FROM users WHERE id = $1""",
                state_data['USER_ID']
            )

            user_message = f"""–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç üíº
                
–Ü–º'—è: <i>{user_data['first_name']}</i>
–ü—Ä—ñ–∑–≤–∏—â–µ: <i>{user_data['second_name']}</i>
–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: <b><i>{user_data['birthday']}</i></b>

–ö–æ–Ω—Ç–∞–∫—Ç–∏
Email: """

            # Check email
            if user_data['email'] is None:
                user_message += "<b>–ù–µ —É–∫–∞–∑–∞–Ω–∏–π</b>"
                have_email = False
            else:
                user_message += f"{user_data['email']}"
                have_email = True

            # Check phone number
            user_message += "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "
            if user_data['telephone_number'] is None:
                user_message += "<b>–ù–µ —É–∫–∞–∑–∞–Ω–∏–π</b>"
                have_phone_number = False
            else:
                user_message += f"{user_data['telephone_number']}"
                have_phone_number = True

            # Check passport data
            user_message += "\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ñ –¥–∞–Ω—ñ "
            if user_data['passport_number'] is None or user_data['passport_valid_until'] is None:
                user_message += "–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ñ ‚ùå"
                have_passport_data = False
            else:
                user_message += "–¥–æ–±–∞–≤–ª–µ–Ω—ñ ‚úÖ"
                have_passport_data = True

            ikb = await self._user_cabinet_kb(have_email, have_phone_number, have_passport_data)
            await message.answer(
                user_message,
                reply_markup=ikb,
                parse_mode=ParseMode.HTML
            )
            await state.set_state(UserCabinet.USER_CABINET_HANDLER)

    async def check_history(self, message: Message, state: FSMContext):
        pass

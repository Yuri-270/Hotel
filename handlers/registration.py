from datetime import datetime

from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from handlers.support import SupportClass
from utils.data_base import DataBase
from utils.verification_methods import VerifyingEmail
from utils.states import *


__all__ = [
    'RegistrationHandler'
]


class RegistrationHandler(SupportClass):

    def __init__(self):
        super().__init__()
        self._registration_kb()

    async def command_start(self, message: Message, state: FSMContext):
        await state.update_data(USER_ID=message.from_user.id)
        pool = await DataBase.get_pool()

        async with pool.acquire() as con:
            user_data = await con.fetchval(
                "SELECT id FROM users WHERE id = $1",
                message.from_user.id
            )

        if user_data is None:
            await message.answer(
                "–ü—Ä–∏–≤—ñ—Ç üñê \n–¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(RegistrationState.INPUT_FIRST_NAME)

        else:
            await self.main_menu(message, state)

    async def set_first_name(self, message: Message, state: FSMContext):
        if await self._length_checker(message, 32):
            await state.update_data(FIRST_NAME=message.text)

            await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=ReplyKeyboardRemove())
            await state.set_state(RegistrationState.INPUT_SECOND_NAME)

    async def set_second_name(self, message: Message, state: FSMContext):
        if await self._length_checker(message, 32):
            await state.update_data(SECOND_NAME=message.text)

            await message.answer(
                "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è üìÖ \n–î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ <i>dd.mm.yyyy</i>",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode=ParseMode.HTML
            )
            await state.set_state(RegistrationState.INPUT_BIRTHDAY)

    async def set_birthday(self, message: Message, state: FSMContext):
        data_check_res = await self._date_checker(message, message.text)

        if data_check_res[0]:
            user_years_is_18 = await self.is_adult(message, data_check_res[1])
            if user_years_is_18:
                await state.update_data(BIRTHDAY=message.text)

                state_data = await state.get_data()
                pool = await DataBase.get_pool()
                async with pool.acquire() as con:
                    await con.fetch(
                        """INSERT INTO users(id, first_name, second_name, birthday)
                    VALUES ($1, $2, $3, $4)""",
                        state_data['USER_ID'],
                        state_data['FIRST_NAME'],
                        state_data['SECOND_NAME'],
                        data_check_res[1]
                    )

                await message.answer(
                    "–ó–∞—Ä–∞–∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ —Å–≤—ñ–π email, \n–≤–∏ —Ü–µ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Ç–æ–º \n–í–≤–µ–¥—ñ—Ç—å email",
                    reply_markup=self._skip_email
                )
                await state.set_state(RegistrationState.INPUT_EMAIL)

    async def set_email(self, message: Message, state: FSMContext):
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ‚§¥Ô∏è":
            await message.answer(
                """–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π email
–∞–ª–µ –ø–æ–∫–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏""",
                reply_markup=ReplyKeyboardRemove()
            )
            await self.main_menu(message, state)
            return None

        if await self._length_checker(message, 64):
            if await self.is_email(message.text):
                await state.update_data(EMAIL=message.text)
                await VerifyingEmail.send_message(message, state)
                await message.answer(
                    f"–í–∞–º –Ω–∞ {message.text} –º–∞—î –ø—Ä–∏–π—Ç–∏ –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó \n–í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –ø–æ–ª–µ –Ω–∏–∂—á–µ",
                    reply_markup=self._verification_email_kb
                )
                await state.set_state(RegistrationState.VERIFICATION_EMAIL)

            else:
                await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ email")

    async def check_verification_email_key(self, message: Message, state: FSMContext):
        if message.text == '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ —Ä–∞–∑ üîÑ':
            await VerifyingEmail.send_message(message, state)
            await message.answer(
                f"–í–∞–º –Ω–∞ {message.text} –º–∞—î –ø—Ä–∏–π—Ç–∏ –∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó \n–í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –ø–æ–ª–µ –Ω–∏–∂—á–µ",
                reply_markup=self._back_kb
            )
            await state.set_state(RegistrationState.VERIFICATION_EMAIL)

        elif message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
            await message.answer(
                """–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π email
–∞–ª–µ –ø–æ–∫–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏""",
                reply_markup=ReplyKeyboardRemove()
            )
            await self.main_menu(message, state)

        elif message.text.isnumeric() and len(message.text) == 6:
            is_verified = await VerifyingEmail.check_verifying_key(message, state)
            if is_verified:
                await message.answer(
                    """–í–∞—à email –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–∏ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
–¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–æ—Ç—ñ–º""",
                    reply_markup=self._skip_phone_number
                )
                await state.set_state(RegistrationState.INPUT_TELEPHONE_NUMBER)

        else:
            await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –∫–æ–¥")

    async def set_telephone_number(self, message: Message, state: FSMContext):
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ‚§¥Ô∏è":
            await message.answer(
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—ñ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n–∞–ª–µ –ø–æ–∫–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            await self.main_menu(message, state)

        else:
            phone_number = message.text
            if phone_number[0] == '+':
                phone_number = phone_number[1:-1]

            if phone_number.isnumeric():
                state_data = await state.get_data()
                pool = await DataBase.get_pool()
                async with pool.acquire() as con:
                    await con.fetch(
                        "UPDATE users SET telephone_number = $1 WHERE id = $2",
                        int(phone_number),
                        state_data['USER_ID']
                    )

                await message.answer(
                    "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π, —Ç–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–±–∞–≤–∏—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞",
                    reply_markup=ReplyKeyboardRemove()
                )
                await message.answer(
                    "–í–∏ –¥–æ–∑–≤–æ–ª—è—î—Ç–µ –æ–±—Ä–æ–±–∫—É —Å–≤–æ—ó—Ö –¥–∞–Ω–Ω–∏—Ö",
                    reply_markup=self._confirm_data_ikb
                )
                await state.set_state(RegistrationState.CONFIRM_THE_TRANSFER_PASSPORT_DATA)

    async def input_passport_number(self, call: CallbackQuery, state: FSMContext):
        if call.data == 'no':
            await call.message.answer(
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ \n–∞–ª–µ –ø–æ–∫–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            await self.main_menu(call.message, state)

        elif call.data == 'yes':
            await call.message.answer(
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞",
                reply_markup=self._back_kb
            )
            await state.set_state(RegistrationState.INPUT_PASSPORT_NUMBER)

    async def get_passport_data(self, message: Message, state: FSMContext):
        if message.text == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
            await message.answer(
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ \n–∞–ª–µ –ø–æ–∫–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            await self.main_menu(message, state)

        elif message.text.isnumeric() and len(message.text) == 9:
            state_data = await state.get_data()
            pool = await DataBase.get_pool()
            async with pool.acquire() as con:
                await con.fetch(
                    "UPDATE users SET passport_number = $1 WHERE id = $2",
                    message.text,
                    state_data['USER_ID']
                )
                await message.answer(
                    "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π \n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω —á–∏—Å–ª–∞ –¥—ñ–π—Å–Ω–∏–π",
                    reply_markup=self._back_kb
                )
                await state.set_state(RegistrationState.INPUT_PASSPORT_VALID_UNTIL)

        else:
            await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")

    async def get_passport_valid_until(self, message: Message, state: FSMContext):
        data_res = await self._date_checker(message, message.text)
        if message.text == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
            await message.answer(
                "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Ç–æ–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Å–ø–æ—Ä—Ç–∞ \n–∞–ª–µ –ø–æ–∫–∞ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏",
                reply_markup=ReplyKeyboardRemove()
            )
            await self.main_menu(message, state)

        elif data_res[0]:
            today_date = datetime.today()
            if today_date > data_res[1]:
                await message.answer("–ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π!", reply_markup=self._back_kb)

            else:
                state_data = await state.get_data()
                pool = await DataBase.get_pool()
                async with pool.acquire() as con:
                    await con.fetch(
                        "UPDATE users SET passport_valid_until = $1 WHERE id = $2",
                        data_res[1],
                        state_data['USER_ID']
                    )

                await message.answer("–í–∏ –ø—Ä–æ–π—à–ª–∏ —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—é \n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ä–µ–Ω–¥—É–≤–∞—Ç–∏ –∫—ñ–º–Ω–∞—Ç–∏ üéâ")
                await self.main_menu(message, state)

        else:
            await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –¥–∞—Ç—É")
